#!/usr/bin/env bash

# This script transforms an operator dir structured in the style of
# community-operators into one expected by operator-registry, inserts the
# scorecard proxy container, and proxy kubeconfig  secret, volume, and mount
# into a CSV, creates CR's from CSV metadata,  deploys the operator with the
# OLM in a local cluster, and runs the SDK  scorecard against the operator.

set -ex

for f in "$(cd "$(dirname ${BASH_SOURCE[0]})/.." && pwd)"/lib/*; do
  . "$f"
done

# Relative path to the dir containing operator manifests. Usually something
# like "community-operators/automation-broker".
[[ -z "$REL_OP_PATH" ]] && REL_OP_PATH="$1"
if [[ ! -d "$REL_OP_PATH" ]]; then
  echo "Relative path to operator package '$REL_OP_PATH' does not exist."
  exit 1
fi
# This script assumes versions are written as "v0.0.1" in file names and
# fields, but OP_VER is expected to not include a "v" prefix, ex. "0.0.1".
[[ -z "$OP_VER" ]] && OP_VER="$2"
if [[ -z "$OP_VER" || ! "$OP_VER" =~ ^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$ ]]; then
  echo "Operator version '$OP_VER' not valid."
  exit 1
fi

if [[ -z "$CLUSTER_NAME" ]]; then
  echo "CLUSTER_NAME not set."
  exit 1
fi
[[ -z "$KUBECONFIG" ]] && KUBECONFIG="$(pwd)/${CLUSTER_NAME}/auth/kubeconfig"
if [[ ! -e "$KUBECONFIG" ]]; then
  echo "KUBECONFIG does not exist."
  exit 1
fi
CLUSTER_DNS="$(get_cluster_dns "$KUBECONFIG" "$CLUSTER_NAME")"
if [[ -z "$CLUSTER_DNS" ]]; then
  echo "CLUSTER_DNS not found in $KUBECONFIG under cluster name ${CLUSTER_NAME}."
  exit 1
fi
export KUBECONFIG="$KUBECONFIG"
kubectl config use-context admin

TMP="$(mktemp -d)"
trap_add_exit "rm -rf $TMP"
DEPLOY_DIR="${TMP}/deploy"
PKG_FILE="$(find "$REL_OP_PATH" -name "*.package.yaml" -print -quit)"
PKG_NAME="$(yq r "$PKG_FILE" "packageName")"
ABS_BUNDLE_PATH="${DEPLOY_DIR}/${PKG_NAME}/${OP_VER}"
CR_DIR="${DEPLOY_DIR}/crs"
mkdir -p "$ABS_BUNDLE_PATH"
mkdir -p "$CR_DIR"

# Organize expected dir structure for the registry image build.
cp -a "$(dirname "$REL_OP_PATH")/$(basename "$REL_OP_PATH")"/* "$ABS_BUNDLE_PATH"
pushd "$DEPLOY_DIR"
mv "${ABS_BUNDLE_PATH}/${PKG_NAME}.package.yaml" "${PKG_NAME}/"
NAMESPACE="local"
CATALOGSOURCE_FILE="${PKG_NAME}.catalogsource.yaml"
SUBSCRIPTION_FILE="${PKG_NAME}.subscription.yaml"
SC_PROXY_IMAGE="quay.io/operator-framework/scorecard-proxy:latest"
# Make sure this registry is public before proceeding.
OP_REGISTRY_IMAGE="quay.io/estroz/${PKG_NAME}:${OP_VER}-registry"
SECRET_FILE="${DEPLOY_DIR}/scorecard.secret.yaml"
set -u
CSV_FILE="$(find "$ABS_BUNDLE_PATH" -name "*.v${OP_VER}.clusterserviceversion.yaml" -print -quit)"
CSV_NAME="$(yq r "$CSV_FILE" "metadata.name")"
set +u

# Create catalog manifests and Dockerfile to create a registry image.
create_catalogsource_file "$CATALOGSOURCE_FILE" "$PKG_NAME" "$OP_REGISTRY_IMAGE" "$NAMESPACE"
create_subscription_file "$SUBSCRIPTION_FILE" "$PKG_NAME" "$PKG_NAME" "$CSV_NAME" "$NAMESPACE"
create_registry_dockerfile "Dockerfile" "$PKG_NAME"

# Add scorecard proxy resources to the CSV.
create_cr_files_from_metadata "$CSV_FILE" "$CR_DIR" "$NAMESPACE"
create_permissions_files "$DEPLOY_DIR" "$CSV_FILE" "$PKG_NAME" "$NAMESPACE"
create_kubeconfig_secret_file "$SECRET_FILE" "$NAMESPACE" "$CLUSTER_DNS"
insert_kubeconfig_volume "$CSV_FILE"
insert_kubeconfig_secret_mount "$CSV_FILE"
insert_proxy_container "$CSV_FILE" "$SC_PROXY_IMAGE"

# Build a registry container containing operator manifests.
docker build -t "$OP_REGISTRY_IMAGE" .
docker push "$OP_REGISTRY_IMAGE"

# Create a namespace if necessary.
if ! kubectl get namespace "$NAMESPACE" > /dev/null 2>&1; then
  kubectl create namespace "$NAMESPACE"
fi

apply_objects_incluster "$DEPLOY_DIR"

# Wait for the deployment specified in the CSV to rollout successfully.
DEP_NAME="$(yq r "$CSV_FILE" "spec.install.spec.deployments[0].name")"
wait_on_deployment "$DEP_NAME" "$NAMESPACE"

LOG_FILE="${TMP}/info.log"
CS_NAME="$(yq r "$CATALOGSOURCE_FILE" "metadata.name")"
SUB_NAME="$(yq r "$SUBSCRIPTION_FILE" "metadata.name")"
kubectl describe catalogsource "$CS_NAME" --namespace="$NAMESPACE" > "$LOG_FILE" 2>&1
echo -e "\n\n---\n\n" >> "$LOG_FILE"
kubectl describe subscription "$SUB_NAME" --namespace="$NAMESPACE" >> "$LOG_FILE" 2>&1
echo -e "\n\n---\n\n" >> "$LOG_FILE"
kubectl describe csv "$CSV_NAME" --namespace="$NAMESPACE" >> "$LOG_FILE" 2>&1
echo -e "\n\n---\n\n" >> "$LOG_FILE"
kubectl describe deployment "$DEP_NAME" --namespace="$NAMESPACE" >> "$LOG_FILE" 2>&1
echo -e "\n\n---\n\n" >> "$LOG_FILE"
kubectl describe pods --namespace="$NAMESPACE" >> "$LOG_FILE" 2>&1
trap "cat $LOG_FILE" ERR

# Run scorecard tests on the operator.
# TODO: run against multiple CR's. Right now the scorecard only works with one
# CR.
for cr_file in $(find "$CR_DIR" -name "*.cr.yaml" -print -quit); do
  operator-sdk scorecard \
    --cr-manifest "$cr_file" \
    --crds-dir "$ABS_BUNDLE_PATH" \
    --olm-deployed \
    --csv-path "$CSV_FILE" \
    --namespace "$NAMESPACE" \
    --init-timeout 60 \
    --proxy-image "$SC_PROXY_IMAGE" \
    --kubeconfig "$KUBECONFIG" \
    --verbose
done
